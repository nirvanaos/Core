/// \file
/*
* Nirvana Core.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_CORE_COREDOMAINS_IDL_
#define NIRVANA_CORE_COREDOMAINS_IDL_

#include "Nirvana/Domains.idl"

module Nirvana {

interface AccessDirect;

/// Module load information.
struct ModuleLoad
{
	long module_id; ///< Unique module ID.
	AccessDirect binary; ///< Access to module binary file.
};

/// Object binding information.
union Binding switch (boolean) {
	/// The object binding requires loading of the module.
case TRUE: ModuleLoad module_load;

	/// The object was bound in other protection domain.
case FALSE: Object loaded_object;
};

/// The core extension of the ProtDomain interface.
/// This interface is subject of change and intended for internal use by Nirvana core.
interface ProtDomainCore : ProtDomain
{
	Object load_and_bind (in long mod_id, in AccessDirect file, in string name)
		raises (BindError::Error);

	// returns module flags
	unsigned short get_module_bindings (in AccessDirect file, out PM::ModuleBindings bindings)
		raises (BindError::Error);
};

/// The core extension of the SysDomain interface.
/// This interface is subject of change and intended for internal use by Nirvana core.
interface SysDomainCore : SysDomain
{
	/// Get binding information for the specified object name.
	/// 
	/// \param name Static object name.
	/// \param platform Target platform ID.
	/// \param binding Binding information returned.
	void get_binding (in string name, in PlatformId platform, out Binding binding)
		raises (BindError::Error);
};

};

#endif
