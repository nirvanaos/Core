/// \file
/*
* Nirvana IDL support library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/

#include <CORBA/InterfaceRepository.idl>
#include <CORBA/TypeCode.idl>

module CORBA {
module Core {

local interface TC_Factory
{
  TypeCode create_struct_tc (
    in RepositoryId             id,
    in Identifier               name,
    in StructMemberSeq          members
  );

  TypeCode create_union_tc (
    in RepositoryId             id,
    in Identifier               name,
    in TypeCode                 discriminator_type,
    in UnionMemberSeq           members
  );

  TypeCode create_enum_tc (
    in RepositoryId             id,
    in Identifier               name,
    in EnumMemberSeq            members
  );

  TypeCode create_alias_tc (
    in RepositoryId             id,
    in Identifier               name,
    in TypeCode                 original_type
  );

  TypeCode create_exception_tc (
    in RepositoryId             id,
    in Identifier               name,
    in StructMemberSeq          members
  );

  TypeCode create_interface_tc (
    in RepositoryId             id,
    in Identifier               name
  );

  TypeCode create_string_tc (
    in unsigned long            bound
  );

  TypeCode create_wstring_tc (
    in unsigned long            bound
  );

  TypeCode create_fixed_tc (
    in unsigned short           digits,
    in short                    scale
  );

  TypeCode create_sequence_tc (
    in unsigned long            bound,
    in TypeCode                 element_type
  );

  TypeCode create_array_tc (
    in unsigned long            length,
    in TypeCode                 element_type
  );

  TypeCode create_value_tc (
    in RepositoryId             id,
    in Identifier               name,
    in ValueModifier            type_modifier,
    in TypeCode                 concrete_base,
    in ValueMemberSeq           members
  );

  TypeCode create_value_box_tc (
    in RepositoryId             id,
    in Identifier               name,
    in TypeCode                 boxed_type
  );

  TypeCode create_native_tc (
    in RepositoryId             id,
    in Identifier               name
  );

  TypeCode create_recursive_tc (
    in RepositoryId             id
  );

  TypeCode create_abstract_interface_tc (
    in RepositoryId             id,
    in Identifier               name
  );

  TypeCode create_local_interface_tc (
    in RepositoryId             id,
    in Identifier               name
  );

  TypeCode create_component_tc (
    in RepositoryId             id,
    in Identifier               name
  );

  TypeCode create_home_tc (
    in RepositoryId             id,
    in Identifier               name
  );

  TypeCode create_event_tc (
    in RepositoryId             id,
    in Identifier               name,
    in ValueModifier            type_modifier,
    in TypeCode                 concrete_base,
    in ValueMemberSeq           members
  );

  oneway void collect_garbage ();
};

};
};
