// Nirvana Project
// ORB implementation configuration parameters

#ifndef _CONFIG_H_
#define _CONFIG_H_

/*
  Check level.
  0 - No additional check. For embedded systems with debugged software.
  1 - Unexpensive checks added. 
  2 - Paranoidal check. For debug environment.
*/
#define BUILD_CHECK_LEVEL 2

// Build with fixed protection unit. 0 - no assumption about unit size.
#define FIXED_PROTECTION_UNIT 4096

// Heap parameters

/*
  HEAP_UNIT_MIN - минимальный размер выделяемого блока.
  Размер выделяемого блока выравнивается в сторону увеличения на эту величину.
  Таким образом, за счет выравнивания, накладные расходы составляют 
  HEAP_UNIT_MIN/2 байт на каждый выделенный блок.
  Кроме того, размер битовой карты составляет 2 бита на HEAP_UNIT_MIN байт кучи.
  Таким образом, оптимальная величина HEAP_UNIT_MIN зависит от количества и среднего
  размера выделенных блоков.
  В классических реализациях кучи, накладные расходы составляют обычно не менее 8 байт
  на выделенный блок. Для современных объектно-ориентированных программ характерно большое
  количество небольших блоков памяти. Таким образом, накладные расходы в обычной
  куче достаточно велики.
  В данной реализации минимальный размер блока равен 16 байт.
  Можно также попробовать 32 байт. Другие размеры вряд ли дадут оптимальный результат.
*/

#define HEAP_UNIT_MIN 16

/*
  HEAP_LEVELS - количество уровней (размеров блоков) кучи. Определяет максимальный 
  размер выделяемого блока HEAP_UNIT_MAX = HEAP_UNIT_MIN << (HEAP_LEVELS - 1).
  Блоки большего размера выделяются напрямую базовым сервисом памяти.
  Накладные расходы из-за выравнивания для базового
  сервиса памяти составляют половину PROTECTION_UNIT (аппаратной страницы) на блок.
  Поэтому HEAP_UNIT_MAX должен быть значительно больше размера страницы, и не сильно
  меньшим ALLOCATION_UNIT и SHARING_UNIT.
  Блоки такого большого размера выделяются достаточно редко.
  Кроме того, они часто бывают выравнены по размеру страницы (буферы etc.).
  Базовый сервис обычно выделяет каждый блок в отдельном SHARING_UNIT, что уменьшает
  накладные расходы при копировании.
  Таким образом, выделение достаточно больших блоков непосредственно через базовый сервис
  можно считать оправданным.
  В данной реализации количество уровней равно 11.
  Это дает HEAP_UNIT_MAX = HEAP_UNIT_MIN * 1024, равный 16 (32)K. Для процессоров Intel
  это 4 (8) страниц, что вполне достаточно.
  В системах с небольшими величинами PROTECTION_UNIT, ALLOCATION_UNIT и SHARING_UNIT можно 
  попробовать количество уровней 10.
*/

#define HEAP_LEVELS 11

#define HEAP_UNIT_MAX (HEAP_UNIT_MIN << (HEAP_LEVELS - 1))

/*
  HEAP_DIRECTORY_SIZE - размер управляющего блока кучи. Должен быть кратен PROTECTION_UNIT.
  Управляющий блок содержит битовую карту свободных блоков и массив количества
  свободных блоков на уровнях. Меньший размер более экономно расходует память, 
  выделяемую на управление кучей.
  Так как максимальный размер блока меньше размера кучи, битовая карта выглядит,
  как пирамида со срезанной верхушкой. На месте верхушки расподожен индексный массив, 
  UShort, содержащий информацию о количестве свободных блоков на различных уровнях.
  Уменьшение размера управляющего блока кучи уменьшает размер срезанной верхушки 
  и оставляет меньше места для индекса. При этом приходится отводить один счетчик свободных
  блоков на несколько верхних уровней. Это может увеличить время поиска свободного
  блока в куче.
  Размер управляющего блока принимается равным 16, 32 или 64 К. Меньшие и большие размеры
  вряд ли дадут оптимальный результат.
*/

#define HEAP_DIRECTORY_SIZE 0x10000
//#define HEAP_DIRECTORY_SIZE 0x8000
//#define HEAP_DIRECTORY_SIZE 0x4000

/*
  HEAP_HEADER_SIZE - размер заголовка кучи. Заголовок содержит 1 или несколько управляющих
  блоков. Размер заголовка должен быть кратен гранулярности памяти домена защиты - максимальному
  значению MAX (ALLOCATION_UNIT, PROTECTION_UNIT, SHARING_UNIT). Если HEAP_DIRECTORY_SIZE
  меньше этой величины, заголовок кучи содержит несколько управляющих блоков, а сама куча
  делится на соответствующее количество частей, каждая из которых работает отдельно.
  Для Win32 размер заголовка равен 64K. Для систем с меньшими размерами ALLOCATION_UNIT
  и SHARING_UNIT его можно сделать меньше.
*/

#define HEAP_HEADER_SIZE 0x10000

#endif  //  _CONFIG_H_

